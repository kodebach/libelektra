name: CMake

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        build_config: [ shared, full, static ]
        asan: [ asan, "" ]
        include:
          - cc_compiler: gcc
            cxx_compiler: g++
          - cc_compiler: clang
            cxx_compiler: clang++

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get -qq update
        sudo apt-get install ninja-build
        sudo apt-get install devscripts # contains `checkbashisms`
        sudo apt-get install libboost-all-dev
        sudo apt-get install libyaml-cpp-dev
        sudo apt-get install libuv-dev
        sudo apt-get install libdbus-1-dev
        sudo apt-get install libev-dev
        sudo apt-get install libzmq3-dev
        sudo apt-get install libxerces-c-dev
        sudo apt-get install moreutils # contains `sponge` required by `reformat-cmake`
        sudo pip install cmake-format[yaml]==0.6.3

    - name: Install dependencies
      if: ${{ runner.os == 'macOS' }}
      run: |
        rvm install 2.7.1
        rvm use 2.7.1
        gem install test-unit --no-document
        if [ "$CC" = 'gcc' ]; then
          brew upgrade gcc
          export CC=gcc-10
          export CXX=g++-10
        fi
        pip2 install cheetah # Required by kdb-gen
        # start D-Bus session bus
        brew services start dbus
        brew install augeas bison dbus discount flex gpgme libev libgcrypt libgit2 libuv lua ninja openssl python@3.9 qt swig yajl zeromq

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    
    - name: Choose Plugins
      if: ${{ runner.os == 'macOS' }}
      run: echo "PLUGINS=ALL;-xerces;-curlget" >> $GITHUB_ENV
    
    - name: Choose Plugins
      if: ${{ runner.os == 'Linux' }}
      run: echo "PLUGINS=ALL" >> $GITHUB_ENV
      
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -G ninja 
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        -DCC_COMPILER=${{ matrix.cc_compiler }}
        -DCXX_COMPILER=${{ matrix.cxx_compiler }}
        -DPLUGINS=${{ plugins }}
        -DBINDINGS=ALL
        -DTOOLS=ALL
        -DBUILD_FULL=${{ matrix.build_config == 'full' }}
        -DBUILD_SHARED=${{ matrix.build_config == 'shared' }}
        -DBUILD_STATIC=${{ matrix.build_config == 'static' }}
        -DENABLE_ASAN=${{ matrix.asan == 'asan' }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Test all
      if: ${{ !matrix.asan }}
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --target run_all

    - name: Test nocheckshell
      if: ${{ matrix.asan }}
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --target run_nocheckshell

    - name: Install
      if: ${{ !matrix.asan }}
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --target install
    
    - name: Test installed
      if: ${{ !matrix.asan }}
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: kdb run_all
